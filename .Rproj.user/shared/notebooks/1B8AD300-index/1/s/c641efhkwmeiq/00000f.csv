"0","pacman::p_load(tidyverse, lubridate, readr,highcharter,echarts4r,echarts4r.maps,leaflet,ggmap,leaflet.extras,htmltools,broom,flexdashboard,readr)"
"0",""
"0","geo_coded_start <- read_csv(""geo_coded_start.csv"")"
"1","[1mRows: [22m[34m1314[39m [1mColumns: [22m[34m5[39m
"
"1","[36mâ”€â”€[39m [1mColumn specification[22m [36mâ”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€[39m
[1mDelimiter:[22m "",""
[31mchr[39m (3): address_found, suburb, postcode
[32mdbl[39m (2): START_LATITUDE, START_LONGITUDE
"
"1","
[36mâ„¹[39m Use `spec()` to retrieve the full column specification for this data.
[36mâ„¹[39m Specify the column types or set `show_col_types = FALSE` to quiet this message.
"
"0","fawaz_lime <- read_csv(""TRIPS.csv"")"
"1","[1mRows: [22m[34m1445[39m [1mColumns: [22m[34m24[39m
"
"1","[36mâ”€â”€[39m [1mColumn specification[22m [36mâ”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€[39m
[1mDelimiter:[22m "",""
[31mchr[39m (10): STATUS, STARTED_AT, COMPLETED_AT, DISCOUNTABLE_TYPE, TRIP_CURRENCY, REFUNDED_AT, ERROR, ...
[32mdbl[39m (12): DISTANCE_METERS, COST_AMOUNT_CENTS, START_LATITUDE, START_LONGITUDE, BASE_COST_AMOUNT_CE...
[33mlgl[39m  (2): REVIEW, FINE_REFUND_AMOUNT_CENTS
"
"1","
[36mâ„¹[39m Use `spec()` to retrieve the full column specification for this data.
[36mâ„¹[39m Specify the column types or set `show_col_types = FALSE` to quiet this message.
"
"0","fawaz_lime %>% "
"0","  filter(STATUS == ""completed"" & !is.na(STARTED_AT)) %>% "
"0","  mutate(STARTED_AT = substr(STARTED_AT,start=1,stop=19),"
"0","         COMPLETED_AT = substr(COMPLETED_AT,start=1,stop=19)) %>%"
"0","  mutate(start_date = lubridate::as_datetime(STARTED_AT),"
"0","         end_date = lubridate::as_datetime(COMPLETED_AT),"
"0","         day_of_week = wday(start_date, label = TRUE),"
"0","         month = month(start_date, label = TRUE)) %>% "
"0","  mutate(time = as.integer(difftime(end_date,start_date,units = ""mins""))) %>% "
"0","  select(start_date, end_date, DISTANCE_METERS,COST_AMOUNT_CENTS,time) %>% "
"0"," mutate(total_distance = DISTANCE_METERS/1000,"
"0","            total_cost = COST_AMOUNT_CENTS/100,"
"0","            total_time = time/60,"
"0","            speed = ((DISTANCE_METERS/1000)/time)*60) -> summarised_dist_time"
"0",""
"0","fawaz_lime %>% "
"0","  # select(STARTED_AT,COMPLETED_AT) %>% "
"0","  filter(STATUS == ""completed"" & !is.na(STARTED_AT)) %>% "
"0","  mutate(STARTED_AT = substr(STARTED_AT,start=1,stop=19),"
"0","         COMPLETED_AT = substr(COMPLETED_AT,start=1,stop=19)) %>%"
"0","  mutate(start_date = lubridate::as_datetime(STARTED_AT),"
"0","         end_date = lubridate::as_datetime(COMPLETED_AT),"
"0","         day_of_week = wday(start_date, label = TRUE),"
"0","         month = month(start_date, label = TRUE),"
"0","         quarter = quarter(start_date)) %>% "
"0","  mutate(time = as.integer(difftime(end_date,start_date,units = ""mins"")),"
"0","         COST=COST_AMOUNT_CENTS/100,"
"0","         speed = ((DISTANCE_METERS/1000)/time)*60) %>%"
"0","  filter(speed != Inf & COST>0) %>%"
"0","  select(start_date,end_date,time,DISTANCE_METERS,COST,speed) -> to_model"
"0",""
